DROP USER montran CASCADE;
ALTER USER SYSTEM IDENTIFIED BY Oracle2020;
ALTER USER training IDENTIFIED BY training;
ALTER SESSION SET "_ORACLE_SCRIPT"=true;  
CREATE USER training IDENTIFIED BY trining;
GRANT CONNECT,DBA TO training;
GRANT DBA TO montran;
CREATE TABLE employee_master
(
	employee_id number(10),
	first_name varchar2(30),
	last_name varchar2(30),
	salary number(10,2)
);

DESC employee_master;

INSERT INTO employee_master VALUES(101,'Vivek','Gohil',10000000.00);

SET LINESIZE 32000;
SET PAGESIZE 50000;

ALTER TABLE employee_master ADD (age number(2));
ALTER TABLE employee_master MODIFY (age number(3));
ALTER TABLE employee_master DROP column age;
ALTER TABLE employee_master ADD (age number(2) , married varchar2(3));
ALTER TABLE employee_master DROP (age,married);

DROP TABLE employee_master;

CREATE TABLE employee (
	emp_code number (5) NOT NULL,
	emp_name varchar2 (25) NOT NULL,
	dept_code varchar2 (4) 
);

INSERT INTO employee
VALUES (101,NULL,'D981');

TRUNCATE TABLE employee;


ALTER TABLE employee
RENAME TO employee_master;


DROP TABLE employee;

create table employee (
	emp_code number (5) CONSTRAINT employee_uq UNIQUE,
	emp_name varchar2 (25) CONSTRAINT employee_null NOT NULL
);

INSERT INTO employee VALUES(101,'Vivek');
INSERT INTO employee VALUES(101,'Sunny');


DROP TABLE Persons;
CREATE TABLE Persons (
    ID number NOT NULL,
    LastName varchar2(255) NOT NULL,
    FirstName varchar2(255),
    Age int CONSTRAINT employee_age_check CHECK (Age>=18)
);

INSERT INTO Persons VALUES(101,'Gohil','Vivek',12);

ALTER TABLE Persons
DROP CONSTRAINT employee_age_check;

ALTER TABLE Persons
ADD CONSTRAINT employee_age_check CHECK (Age>=18);

CREATE TABLE Persons (
    ID int NOT NULL PRIMARY KEY,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
);

ALTER TABLE Persons
DROP PRIMARY KEY;

ALTER TABLE Persons
DROP CONSTRAINT PK_Person;

ALTER TABLE Persons
ADD PRIMARY KEY (ID);

ALTER TABLE Persons
ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);

------------------------------------------------------------------
CREATE TABLE Persons (
    PersonID int NOT NULL PRIMARY KEY,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);

ALTER TABLE Orders
DROP CONSTRAINT FK_PersonOrder;

ALTER TABLE Orders
ADD CONSTRAINT FK_PersonOrder
FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

--*******************************************************
--Simple Data Retrieval using select clause

-- SELECT *

SELECT * FROM emp;

-- SELECT columnlist

SELECT empno, ename
FROM emp;

-DESC tablename

DESC emp;

--The tab table

DESC tab;

SELECT * FROM TAB;

-- The DISTINCT keyword

SELECT DISTINCT deptno from emp;

--*******************************************************
--Conditional retrieval using where clause

--Relational operator =, >, >= 

SELECT ename,job,sal
FROM  emp
where ename='ALLEN';

SELECT ename,job,sal
FROM emp
WHERE sal>1600;

SELECT ename,job,sal,comm
FROM emp
WHERE sal>=1600;

--Logical operators (AND, OR, NOT)

SELECT * 
FROM emp
WHERE job='CLERK'
AND 
SAL=800;

SELECT * 
FROM emp
WHERE job='CLERK'
OR
SAL=800;

SELECT *
FROM emp
WHERE comm IS NOT NULL;

--Special operators (BETWEEN, IN, LIKE, IS NULL)

--FIND ALL THE SALARY WITHIN 840 AND 2000

SELECT ename, sal
FROM emp
WHERE sal BETWEEN 800 AND 2000;

SELECT ename, sal
FROM emp
WHERE job IN ('CLERK','SALESMAN');

SELECT ename
FROM emp
WHERE ename LIKE 'A%';

SELECT ename, sal, comm
FROM emp
WHERE comm IS NULL;

--*******************************************************
--Ordering the output with ORDER BY clause

--Ordering on a Single Column

SELECT ename, job, sal
FROM emp
ORDER BY sal;

--Ordering in descending order (DESC clause)

SELECT ename, job, sal
FROM emp
ORDER BY sal DESC;

--Ordering on multiple columns

SELECT ename, job, sal
FROM emp
ORDER BY job, sal;

---------------------------------------------------------------------
Date Functions
 
SELECT SYSDATE AS CURRENT_DATE_TIME, EXTRACT(Year FROM SYSDATE) AS ONLY_CURRENT_YEAR 
FROM Dual; 

SELECT SYSDATE AS CURRENT_DATE_TIME, EXTRACT(Month FROM SYSDATE) AS ONLY_CURRENT_MONTH 
FROM Dual; 

SELECT SYSDATE AS CURRENT_DATE_TIME, EXTRACT(Day FROM SYSDATE) AS ONLY_CURRENT_DAY 
FROM Dual; 

SELECT ADD_MONTHS(SYSDATE, -1)  AS PREV_MONTH, SYSDATE AS CURRENT_DATE,  
                                 ADD_MONTHS(SYSDATE, 1) as NEXT_MONTH 
FROM Dual;

SELECT SYSDATE AS CURRENT_DATE, LAST_DAY(SYSDATE) AS LAST_DAY_OF_MONTH,  
                                LAST_DAY(SYSDATE)+1 AS FIRST_DAY_OF_NEXT_MONTH FROM Dual ; 

SELECT SYSDATE AS CURRENT_DATE, LAST_DAY(SYSDATE) - SYSDATE AS DAYS_LEFT_IN_MONTH 
FROM Dual ;


SELECT MONTHS_BETWEEN (TO_DATE ('01-07-2003', 'dd-mm-yyyy'), 
					TO_DATE ('14-03-2003', 'dd-mm-yyyy')) AS NUMBER_OF_MONTHS 
FROM Dual 


SELECT NEXT_DAY(SYSDATE, 'SUNDAY') AS NEXT_SUNDAY 
FROM Dual 
---------------------------------------------------------------------
Nested Query 

SELECT eName FROM Emp 
WHERE sal >(
	SELECT min(sal)FROM Emp WHERE deptno = (SELECT deptno FROM dept WHERE loc = 'NEW YORK')
);

---------------------------------------------------------------------
CREATE SEQUENCE item_seq;

SELECT item_seq.NEXTVAL
FROM dual;

SELECT item_seq.CURRVAL
FROM dual;

CREATE TABLE items(
    item_id NUMBER
);

INSERT INTO items(item_id) VALUES(item_seq.NEXTVAL);
INSERT INTO items(item_id) VALUES(item_seq.NEXTVAL);

COMMIT;

SELECT item_id FROM items;

ALTER SEQUENCE item_seq MAXVALUE 100;

DROP SEQUENCE item_seq;

-----------------------------------------------------------------------
Joins
CREATE TABLE palette_a (
    id INT PRIMARY KEY,
    color VARCHAR2 (100) NOT NULL
);

CREATE TABLE palette_b (
    id INT PRIMARY KEY,
    color VARCHAR2 (100) NOT NULL
);

INSERT INTO palette_a (id, color)
VALUES (1, 'Red');

INSERT INTO palette_a (id, color)
VALUES (2, 'Green');

INSERT INTO palette_a (id, color)
VALUES (3, 'Blue');

INSERT INTO palette_a (id, color)
VALUES (4, 'Purple');

-- insert data for the palette_b
INSERT INTO palette_b (id, color)
VALUES (1, 'Green');

INSERT INTO palette_b (id, color)
VALUES (2, 'Red');

INSERT INTO palette_b (id, color)
VALUES (3, 'Cyan');

INSERT INTO palette_b (id, color)
VALUES (4, 'Brown');


Oracle inner join
SELECT
    a.id id_a,
    a.color color_a,
    b.id id_b,
    b.color color_b
FROM
    palette_a a
INNER JOIN palette_b b ON a.color = b.color;

Oracle left join
SELECT
    a.id id_a,
    a.color color_a,
    b.id id_b,
    b.color color_b
FROM
    palette_a a
LEFT JOIN palette_b b ON a.color = b.color;

Oracle right join
SELECT
    a.id id_a,
    a.color color_a,
    b.id id_b,
    b.color color_b
FROM
    palette_a a
RIGHT JOIN palette_b b ON a.color = b.color;			

Oracle full outer join

SELECT
    a.id id_a,
    a.color color_a,
    b.id id_b,
    b.color color_b
FROM
    palette_a a
FULL OUTER JOIN palette_b b ON a.color = b.color;	

SELF JOIN
CREATE TABLE employees( 
	employee_id          number(10)      not null,
    last_name            varchar2(50)      not null,
    email                varchar2(30),
    hire_date            date,
    job_id               varchar2(30),
    department_id        number(10),
    salary               number(6),
    manager_id           number(6)
);

insert into employees( employee_id, last_name, email, hire_date, job_id, salary,department_id ,manager_id)
                values ( 1001, 'Lawson', 'lawson@g.com', '01-JAN-2002','MGR', 30000,1 ,1004);

insert into employees( employee_id, last_name, email, hire_date, job_id, salary, department_id ,manager_id)
                values ( 1002, 'Wells', 'wells@g.com', '01-JAN-2002', 'DBA', 20000,2, 1005 );

insert into employees( employee_id, last_name, email, hire_date, job_id, salary, department_id ,manager_id)
                 values( 1003, 'Bliss', 'bliss@g.com', '01-JAN-2002', 'PROG', 24000,3 ,1004);

insert into employees( employee_id, last_name, email, hire_date, job_id, salary, department_id, manager_id)
                   values( 1004,  'Kyte', 'tkyte@a.com', SYSDATE-3650, 'MGR',25000 ,4, 1005);

insert into employees( employee_id, last_name, email, hire_date, job_id, salary, department_id, manager_id)
                   values( 1005, 'Viper', 'sdillon@a .com', SYSDATE, 'PROG', 20000, 1, 1006);

insert into employees( employee_id, last_name, email, hire_date, job_id, salary, department_id,manager_id)
                   values( 1006, 'Beck', 'clbeck@g.com', SYSDATE, 'PROG', 20000, 2, null);

insert into employees( employee_id, last_name, email, hire_date, job_id, salary, department_id, manager_id)
                   values( 1007, 'Java', 'java01@g.com', SYSDATE, 'PROG', 20000, 3, 1006);
insert into employees( employee_id, last_name, email, hire_date, job_id, salary, department_id, manager_id)
                   values( 1008, 'Oracle', 'wvelasq@g.com', SYSDATE, 'DBA', 20000, 4, 1006);

select * from employees;

select e1.last_name "Employee" , e2.last_name "Reports To" 
from employees e1 left outer join employees e2
on e1.manager_id = e2.employee_id;

INDEX

SELECT 
    index_name, 
    index_type, 
    visibility, 
    status 
FROM 
    all_indexes
WHERE 
    table_name = 'MEMBERS';
	
The following statement finds members whose last name is Harse:

SELECT member_id,first_name,last_name FROM members
WHERE last_name = 'Harse';

First, add the EXPLAIN PLAN FOR clause immediately before the SQL statement:

EXPLAIN PLAN FOR
SELECT member_id,first_name,last_name FROM members
WHERE last_name = 'Harse';	

SELECT 
    PLAN_TABLE_OUTPUT 
FROM 
    TABLE(DBMS_XPLAN.DISPLAY());


Creating an index on one column example

CREATE INDEX members_last_name_i 
ON members(last_name);

Now, showing the indexes again, you will find that the members table has two indexes:
SELECT 
    index_name, 
    index_type, 
    visibility, 
    status 
FROM 
    all_indexes
WHERE 
    table_name = 'MEMBERS';

Removing an index
DROP INDEX members_last_name_i;

